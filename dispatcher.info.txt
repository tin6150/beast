
# dispatcher.sh is container entrypoint to invoke desired binary
# doesn't seems to work, likely cuz singularity itself is a wrapper and 
# the param get hidden deep into the many layers of the onion rather than being $0
# use $SINGULARITY_NAME

# test with this:


ProgName=dispatcher.sh
ProgName=phylotool.sif
ln -s $ProgName mb
ln -s $ProgName muscle
ln -s $ProgName mafft
# new in build 35:
ln -s $ProgName clustalw
ln -s $ProgName clustalo
# untested:
ln -s $ProgName tree-puzzle
ln -s $ProgName metaphlan2
# new in build 37:
ln -s $ProgName prokka
ln -s $ProgName snp-sites
ln -s $ProgName run_gubbins
ln -s $ProgName iqtree
ln -s $ProgName roary
# new in build 38:
ln -s $ProgName art
# new in build 39/40:
ln -s $ProgName squizz
ln -s $ProgName NCLconverter

## this can list the commands avail by dispatcher.sh
## just be careful to trim out the non-command matches

## cat dispatcher.sh | fgrep \)  | awk -F\) '{print "ln -s phylotool.sif " $1}'


#####

## yet another way, which does not depends on the dispatcher.sh
## is to create shell script, eg run_gubbins.sh, dropping .sh as desired,
## which contains the command to run the container, eg
## singularity exec /full/path/to/phylotool.sif /usr/bin/run_gubbins $*
## full path maybe necessary so that the script can be called from any dir
